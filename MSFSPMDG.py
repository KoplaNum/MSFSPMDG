import xml.etree.ElementTree as ET
import argparse
import sys
import re
from datetime import datetime


class Waypoint:
    def __init__(self, id, latitude_dms, longitude_dms, altitude, type):
        self.id = id
        self.latitude = self.dms_to_decimal(latitude_dms)
        self.longitude = self.dms_to_decimal(longitude_dms)
        self.altitude = int(float(altitude[1:]))
        self.type = type

    def dms_to_decimal(self, dms_str):
        direction = dms_str[0]
        dms_str = re.sub(r'[^0-9. ]', '', dms_str[1:])
        degrees, minutes, seconds = [float(part) for part in dms_str.split()]
        decimal_degrees = degrees + minutes / 60 + seconds / 3600
        if direction in ('S', 'W'):
            decimal_degrees *= -1
        return decimal_degrees


class FlightPlan:
    def __init__(self, file_path):
        tree = ET.parse(file_path)
        root = tree.getroot()
        self.flight_plan = root.find('FlightPlan.FlightPlan')
        self.waypoints = self.parse_waypoints()

    def parse_waypoints(self):
        waypoints = self.flight_plan.findall('ATCWaypoint')
        waypoint_data = []

        for i, waypoint in enumerate(waypoints):
            id = waypoint.get('id')

            # Skip SID/STAR/APP waypoints
            if waypoint.find('ATCWaypointType').text == 'SIDSTARAPP':
                continue

            position = waypoint.find('WorldPosition').text
            latitude_dms, longitude_dms, altitude = position.split(',')

            # Set type to 1 for airports (departure and arrival) and 5 for other waypoints
            type = 1 if i == 0 or i == len(waypoints) - 1 else 5

            waypoint_data.append(
                Waypoint(id, latitude_dms, longitude_dms, altitude, type))

        return waypoint_data


class PMDGConverter:
    def __init__(self, waypoints):
        self.waypoints = waypoints

    def convert(self):
        pmdg = []
        pmdg.append(
            f'Generated by MSFSPMDG {datetime.utcnow().strftime("%d %b %Y %H:%M")} UTC')
        pmdg.append('')
        pmdg.append(str(len(self.waypoints)))
        pmdg.append('')

        for waypoint in self.waypoints:
            altitude = waypoint.altitude if waypoint.type == 1 else 35000
            pmdg.append(
                f"{waypoint.id}\n{waypoint.type}\nDIRECT\n1 N {waypoint.latitude:.4f} W {waypoint.longitude:.4f} {altitude}\n-----\n{waypoint.type if waypoint.type == 1 else '0'}")
            if waypoint.type == 1:  # for airports
                pmdg.append(
                    f"0\n\n0\n{waypoint.altitude}\n-\n-1000000\n-1000000\n")
            else:  # for non-airport waypoints
                pmdg.append('0\n0\n')

        return "\n".join(pmdg)


def main():
    parser = argparse.ArgumentParser(
        description='Convert MSFS flight plan to PMDG .rte flight plan.')
    parser.add_argument('input', help='Input MSFS flight plan (.pln)')
    parser.add_argument('output', help='Output PMDG flight plan (.rte)')

    args = parser.parse_args()

    flight_plan = FlightPlan(args.input)
    converter = PMDGConverter(flight_plan.waypoints)
    pmdg_plan = converter.convert()

    with open(args.output, 'w') as f:
        f.write(pmdg_plan)

    print(f'Converted {args.input} to {args.output}')


if __name__ == '__main__':
    main()
