import xml.etree.ElementTree as ET
import argparse
import re
from datetime import datetime


class Waypoint:
    def __init__(self, id, position, type):
        self.id = id
        self.latitude, self.longitude, self.altitude = self.parse_position(
            position)
        self.type = type

    def parse_position(self, position):
        latitude_dms, longitude_dms, altitude = position.split(',')
        return self.dms_to_decimal(latitude_dms), self.dms_to_decimal(longitude_dms), int(float(altitude[1:]))

    def dms_to_decimal(self, dms_str):
        direction = dms_str[0]
        dms_str = re.sub(r'[^0-9. ]', '', dms_str[1:])
        degrees, minutes, seconds = map(float, dms_str.split())
        decimal_degrees = degrees + minutes / 60 + seconds / 3600
        return decimal_degrees * -1 if direction in ('S', 'W') else decimal_degrees


class FlightPlan:
    def __init__(self, file_path):
        self.waypoints = self.parse_waypoints(
            ET.parse(file_path).getroot().find('FlightPlan.FlightPlan'))

    def parse_waypoints(self, flight_plan):
        return [Waypoint(waypoint.get('id'),
                         waypoint.find('WorldPosition').text,
                         1 if i == 0 or i == len(flight_plan.findall('ATCWaypoint')) - 1 else 5)
                for i, waypoint in enumerate(flight_plan.findall('ATCWaypoint'))
                if waypoint.find('ATCWaypointType').text != 'SIDSTARAPP']


class PMDGConverter:
    def __init__(self, waypoints):
        self.waypoints = waypoints

    def convert(self):
        pmdg = [f'Generated by MSFSPMDG {datetime.utcnow().strftime("%d %b %Y %H:%M")} UTC', '', str(
            len(self.waypoints)), '']

        for waypoint in self.waypoints:
            altitude = waypoint.altitude if waypoint.type == 1 else 35000
            pmdg.extend([f"{waypoint.id}", f"{waypoint.type}", "DIRECT",
                         f"1 N {waypoint.latitude:.4f} W {waypoint.longitude:.4f} {altitude}", "-----",
                         f"{waypoint.type if waypoint.type == 1 else '0'}"])
            pmdg.extend(["0", "0"] if waypoint.type != 1 else [
                        f"0\n\n0\n{waypoint.altitude}\n-\n-1000000\n-1000000\n"])
            pmdg.append('')

        return "\n".join(pmdg)


def main():
    parser = argparse.ArgumentParser(
        description='Convert MSFS flight plan to PMDG .rte flight plan.')
    parser.add_argument('input', help='Input MSFS flight plan (.pln)')
    parser.add_argument('output', help='Output PMDG flight plan (.rte)')
    args = parser.parse_args()

    with open(args.output, 'w') as f:
        f.write(PMDGConverter(FlightPlan(args.input).waypoints).convert())

    print(f'Converted {args.input} to {args.output}')


if __name__ == '__main__':
    main()
